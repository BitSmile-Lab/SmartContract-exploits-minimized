// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';
import {Test} from "forge-std/Test.sol";

contract MockUsers is Test {
    using EnumerableSet for EnumerableSet.AddressSet;

   EnumerableSet.AddressSet internal users;
   address public currentActor;


   modifier useRandomActor(uint256 actorIndexSeed) {
        currentActor = getRandomUser(actorIndexSeed); //_actors.rand(actorIndexSeed);
        _;
    }

   constructor(uint256 number){
    for(uint256 i=0;i<number;i++){
        string memory userName = string(abi.encode("user", i));
        address userAddress = makeAddr(userName);
        users.add(userAddress);
    }
   }

   function getRandomUser(uint256 seed) public view returns(address){
        if(users.length()>0){
            uint256 index = seed % users.length();
            return users.at(index);
        }else{
            return address(0);
        }
   }

   function totalUsersNumber() public view returns(uint256){
    return users.length();
   }

   function totalUsers() public view returns(address[] memory){
    return users.values();
   }
}