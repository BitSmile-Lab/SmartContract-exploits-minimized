// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {UsingWeirdERC20} from "../../src/weirdERC20/UsingWeirdERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {ERC20, IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract UsingWeirdERC20Test is Test {
    using SafeERC20 for IERC20;
    //no use
    UsingWeirdERC20 public usingWeirdERC20;

    address public alice = makeAddr("alice");
    address public bob =  makeAddr("bob");
   
    address public constant BNB = 0xB8c77482e45F1F44dE1745F52C74426C631bDD52;
    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

    function setUp() public {
        usingWeirdERC20 = new UsingWeirdERC20(WETH);
        
    }

    function testUsingWeirdERC20_WETH() public{
        deal(WETH, alice, 1e18);

        assertEq(IERC20(WETH).balanceOf(alice), 1e18);

        vm.prank(alice);
        IERC20(WETH).transfer(bob, 1e18);

        assertEq(IERC20(WETH).balanceOf(bob), 1e18);

    }

    function testUsingWeirdERC20_BNB() public{
        deal(BNB, alice, 1e18);

        assertEq(IERC20(BNB).balanceOf(alice), 1e18);

        vm.prank(alice);
        IERC20(BNB).transfer(bob, 1e18);

        assertEq(IERC20(BNB).balanceOf(bob), 1e18);

    }

     function testUsingWeirdERC20_BNB_safe() public{
        deal(BNB, alice, 1e18);

        assertEq(IERC20(BNB).balanceOf(alice), 1e18);

        vm.prank(alice);
        IERC20(BNB).safeTransfer(bob, 1e18);

        assertEq(IERC20(BNB).balanceOf(bob), 1e18);

    }

    function testBlockTime() public{
        vm.warp(100);
        console2.log("time is", block.timestamp);
        usingWeirdERC20.gettime();
    }

    
}