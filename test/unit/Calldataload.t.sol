// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {Overflow, Underflow, PrecisionLoss} from "../../src/arithmetic/OverflowAndUnderflow.sol";

contract CalldataLoadTest is Test {

    address alice;
    address bob;

    function setUp() public {
        alice = makeAddr("alice");
        bob = makeAddr("bob");
    }

    function funcCall(address one, address two, uint256 number) public returns(uint256){
        uint256 implementation_idx = 5;
        // Workaround for stack too deep error
        assembly { implementation_idx := calldataload(0x44) }// forgefmt: disable-line @audit这个汇编是啥意思？取第三个参数 4+32+32
        console2.log(implementation_idx);
        return implementation_idx;
    }

    function testCalldata() public{
        uint256 input = 3;
        console2.logBytes(abi.encodeWithSignature("funcCall(address,address,uint256)", alice, bob, input));
        uint256 output = funcCall(alice, bob, input);
        assertEq(input, output);
    }

}