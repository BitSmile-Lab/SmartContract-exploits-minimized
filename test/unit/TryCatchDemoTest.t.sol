// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {Foo, Bar, Boo} from "../../src/TryCatch/TryCatchDemo.sol";

contract TryCatchDemoTest is Test{

    Foo public foo;
    Bar public bar;
    Boo public boo;

    function setUp() public {

    bar = new Bar();   
    boo = new Boo(); 
        
    }

    function testTryCatchExternalCall() public{
        bar.tryCatchExternalCall(0);
         bar.tryCatchExternalCall(1);
    }

    function testTryCatchNewContract() public{
        bar.tryCatchNewContract(0x0000000000000000000000000000000000000000);
        bar.tryCatchNewContract(0x0000000000000000000000000000000000000001);
        bar.tryCatchNewContract(0x0000000000000000000000000000000000000002);

    }

    function testTryDiv() public{
        bar.tryDiv(1);
        bar.tryDiv(0);
    }

    //函数返回值与定义不符，即会出现decode错误，try/catch捕获不到-调用直接revert
    function testTryCatchExternalCallReturnDecodeError() public{
        bar.tryCatchExternalCallReturnDecodeError(address(boo), 1);
    }
    //函数调用报错，try/catch能捕获的到这个错误。
    function testTryCatchExternalCallFunctionNotExit() public{
        bar.tryCatchExternalCallFunctionNotExit(address(boo), 1);
    }

    //地址上不存在合约,try/catch捕获不到——调用直接revert
    function testTryCatchExternalCallNoneContractAddress() public{
        bar.tryCatchExternalCallFunctionNotExit(0x0000000000000000000000000000000000000001, 1);
    }



}
