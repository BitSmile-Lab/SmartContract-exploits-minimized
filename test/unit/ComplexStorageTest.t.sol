// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {ComplexStorage} from  "../../src/mapping-storage/ComplexStorage.sol";

contract ComplexStorageTest is Test{

    bytes32 constant public ROLE_ADMIN = "ADMIN";
    bytes32 constant public  ROLE_UPGRADE = "UPGRADE";
    bytes32 constant public ROLE_CONFIG = "CONFIG";
    bytes32 constant public ROLE_KEEPER = "KEEPER";

    address public user1;
    ComplexStorage public cs;
    function setUp() public {
        cs = new ComplexStorage();
        user1 = makeAddr("user1");
    }

    function testHasAdminRole() public{
        assertEq(cs.hasRole(ROLE_ADMIN), true);
        assertEq(cs.hasRole(ROLE_UPGRADE), false);
        
    }

    function testAddAndRemoveRole() public{
        cs.grantRole(user1, ROLE_UPGRADE);
        cs.grantRole(user1, ROLE_CONFIG);
        cs.grantRole(user1, ROLE_KEEPER);


        assertEq(true, cs.hasRole(user1, ROLE_UPGRADE));
        assertEq(false, cs.hasRole(user1, ROLE_ADMIN));

        cs.revokeRole(user1, ROLE_UPGRADE);
        //remove role_upgrade
        assertEq(true, cs.hasRole(user1, ROLE_KEEPER));
        assertEq(false, cs.hasRole(user1, ROLE_UPGRADE));

        cs.revokeAllRole(user1);

        //nothing change
        assertEq(true, cs.hasRole(user1, ROLE_KEEPER));
        assertEq(true, cs.hasRole(user1, ROLE_CONFIG));


    }

    

}