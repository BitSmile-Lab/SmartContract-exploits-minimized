// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test,console2} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";

import {WETH9} from "../mocks/WETH9.sol";
import {WETH9Handler} from "./HandlerWETH9.sol";

contract WETH9Invariants is Test {
    WETH9 public weth;
    WETH9Handler public handler;

    function setUp() public {
        weth = new WETH9();
        handler = new WETH9Handler(weth);
        targetContract(address(handler));
    }

    function invariant_badInvariantThisShouldFail() public {
        uint256 total_now = address(handler).balance + address(weth).balance;

        uint256 total_before=handler.TOTAL_ETH();
        assertEq(total_before, total_now);
      
    }

    function invariant_DepositIndeed() public{
        uint256 depositIndeed = handler.total_deposit() - handler.total_withdraw();
        assertEq(depositIndeed, address(weth).balance);

    }
}