// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

// External contract used for try / catch examples
contract Foo {
    address public owner;

    constructor(address _owner) {
        require(_owner != address(0), "invalid address");
        assert(_owner != 0x0000000000000000000000000000000000000001);
        owner = _owner;
    }

    function myFunc(uint256 x) public pure returns (string memory) {
        require(x != 0, "require failed");
        return "my func was called";
    }

    function divFunc(uint256 x) public pure{
      uint256 y =   1/x;
    }

}

contract Boo{
     function myFunc(uint256 x) public pure {
        require(x != 0, "require failed");     
    }
}

contract Bar {
    event Log(string message);
    event LogBytes(bytes data);

    Foo public foo;

    constructor() {
        // This Foo contract is used for example of try catch with external call
        foo = new Foo(msg.sender);
    }

    // Example of try / catch with external call
    // tryCatchExternalCall(0) => Log("external call failed")
    // tryCatchExternalCall(1) => Log("my func was called")
    function tryCatchExternalCall(uint256 _i) public {
        try foo.myFunc(_i) returns (string memory result) {
            emit Log(result);
        } catch {
            emit Log("external call failed");
        }
    }

   

    // Example of try / catch with contract creation
    // tryCatchNewContract(0x0000000000000000000000000000000000000000) => Log("invalid address")
    // tryCatchNewContract(0x0000000000000000000000000000000000000001) => LogBytes("")
    // tryCatchNewContract(0x0000000000000000000000000000000000000002) => Log("Foo created")
    function tryCatchNewContract(address _owner) public {
        try new Foo(_owner) returns (Foo foo) {
            // you can use variable foo here
            emit Log("Foo created");
        } catch Error(string memory reason) {
            // catch failing revert() and require()
            emit Log(reason);
        }catch  Panic(uint errorCode){
             //如果加了catch Panic(uint errorCode)则落入 failing assert, division by zero, invalid array access, arithmetic overflow and others,
            emit Log("assert error");
        } 
        catch (bytes memory reason) {
            // catch failing assert()
            emit LogBytes(reason);
        }
    }

    function tryDiv(uint256 x) public {
        try foo.divFunc(x) {
            // you can use variable foo here
            emit Log("div ok");
        } catch Error(string memory reason) {
            // catch failing revert() and require()
            emit Log(reason);
        } 
        catch  Panic(uint errorCode){
             //如果加了catch Panic(uint errorCode)则落入 failing assert, division by zero, invalid array access, arithmetic overflow and others,
            emit Log("division by zero");
        }
        catch (bytes memory reason) {//其他的落入到这个catch里面，
       
            // catch failing assert()
            emit LogBytes(reason);
        }
    }

    //ReturnDecodeError
     function tryCatchExternalCallReturnDecodeError(address foo_address , uint256 _i) public {

        try Foo(foo_address).myFunc(_i) returns (string memory result) {
          emit Log(result);
        } catch {
            emit Log("external call failed");
        }
    }
    //FunctionNotExit
    function tryCatchExternalCallFunctionNotExit(address foo_address , uint256 _i) public {

        try Foo(foo_address).divFunc(_i)  {
          emit Log("ok");
        } catch (bytes memory reason) {//其他的落入到这个catch里面，
       
            // catch failing assert()
            emit LogBytes(reason);
        }
    }



}
