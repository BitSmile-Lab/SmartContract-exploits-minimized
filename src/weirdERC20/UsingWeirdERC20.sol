// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {ERC20, IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Test, console2} from "forge-std/Test.sol";
contract UsingWeirdERC20 {
   using SafeERC20 for IERC20;
   IERC20 private immutable i_weirdToken;

    constructor(
        address weirdToken

    )  {
        i_weirdToken = IERC20(weirdToken);
    }

    function transfer(address to, uint256 value) public{
        i_weirdToken.transfer(to, value);
    }

    function safetransfer(address to, uint256 value) public{
        i_weirdToken.safeTransfer(to, value);
    }

    function balanceOf(address account) external view returns (uint256){
        return i_weirdToken.balanceOf(account);
    }
       
    function gettime() external view returns (uint256){
        console2.log("time in contract", block.timestamp);
        return block.timestamp;
    }
   
}