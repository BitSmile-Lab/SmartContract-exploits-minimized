// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

contract MissingAccessControls {
    error NotAuthorized();

    event Transfer(address indexed from,  address indexed to, uint256 amount);

    address public owner;

    

    constructor() {
        owner = msg.sender;
    }

    /* 
     * @notice Set the owner of the contract
     * @notice This should only be callable by the current owner
     * @param newOwner The address of the new owner
     */
    function setOwner(address newOwner) external {
        // This is missing a check on whether the caller is the current owner!!
        owner = newOwner;
    }

    function setOwnerOnlyOwner(address newOwner) external {
        require(msg.sender==owner, "not the owner!");
        owner = newOwner;
    }

    function throwErrors() external {
        revert NotAuthorized();
    }

    function transferToken(address from, address to, uint256 amount) external{
        emit Transfer(from ,to, amount);
    }

    function transferMany(address[] memory froms, address[] memory tos, uint256[] memory amounts) external{
        for(uint256 i=0; i<froms.length; i++){
            emit Transfer(froms[i], tos[i], amounts[i]);
        }
    }

}
